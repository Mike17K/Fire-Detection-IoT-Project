from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf

from sklearn.model_selection import train_test_split
from tensorflow.keras import layers, losses
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Model

class AnomalyDetector(Model):
  def __init__(self):
    super(AnomalyDetector, self).__init__()
    self.encoder = tf.keras.Sequential([
      layers.Dense(30, activation="relu"), # 30 = 10 sensors * 3 values
      layers.Dense(16, activation="relu"),
      layers.Dense(8, activation="relu")])

    self.decoder = tf.keras.Sequential([
      layers.Dense(16, activation="relu"),
      layers.Dense(30, activation="sigmoid")]) # 30 = 10 sensors * 3 values
  
  def save(self, path):
    self.encoder.save(path + "_encoder.keras")
    self.decoder.save(path + "_decoder.keras")
  
  def load(self, path):
    self.encoder = tf.keras.models.load_model(path + "_encoder.keras")
    self.decoder = tf.keras.models.load_model(path + "_decoder.keras")

  def call(self, x):
    encoded = self.encoder(x)
    decoded = self.decoder(encoded)
    return decoded

autoencoder = AnomalyDetector()
autoencoder.compile(optimizer='adam', loss='mae')

# load saved model if available
try:
  autoencoder.load("\\".join(__file__.split("\\")[:-1])+f"\\model\\autoencoder")
  print("Model found, loading it")
except:
  print("No model found, creating a new one")

def normalizeSensorData(data: np.ndarray):
  """
    Normalizes the data to [0,1].
    data: a numpy array of shape (n, 30), 10 sensors with 3 values each, ( temperature, humidity, co2 )
  """
  min_val = [0,0,0] # temp, hum, co2
  max_val = [200,100,500] # temp, hum, co2
  for i in range(data.shape[1]):
      data[:,i] = (data[:,i] - min_val[(i)%3]) / (max_val[(i)%3] - min_val[(i)%3])
  return data


# make predictions
def predict(data: np.ndarray) -> np.ndarray:
  """
    Predicts the anomaly score for a given data point
    data: a tensor of shape (n, 30), 10 sensors with 3 normalized values each, ( temperature, humidity, co2 )
    returns: an array of shape (n, ) with the anomaly score for each data point
  """
  data = normalizeSensorData(data)
  predictions = autoencoder.call(data)
  return np.mean(np.abs(predictions - data), axis=1)

# test data with anomalies
# data = tf.random.normal([1, 30])
# print(data)
# print(predict(data))

# Steps 
# 1. Fetch data
# 2. Normalize data
# 3. Call model and get predictions
# 4. Compare predictions to a threshold

data = np.array([
  [0.028461214923377998e-01,0.007164818963068753e-01,0.976601346769629508e-02,2.055580699873819917e-01,4.112728765048184187e-01,8.285161979816643707e-02,2.091690457381115698e-01,4.102783494574702150e-01,8.170445201367697308e-02,2.038343959775410219e-01,2.192300667258606228e-01,4.126828118771620757e-02,1.030270135340489862e-01,2.108821206616428579e-01,3.937165548236179480e-02,1.038207750606346402e-01,2.128913782928643916e-01,4.213978175856098601e-02,1.051485744428232727e-01,2.174890064810902079e-01,8.013848589329551908e-01,2.001294979957847886e+00,4.019359882635416881e+00,8.039788070756310745e-01,2.002208279639127841e+00,4.021519384079323522e+00,8.002577949257635437e-01,1.988712293649429697e+00,3.957046553691765389e+00,8.017862762979913738e-01],
  [1.088774543216601970e-01,2.119175605596818057e-01,4.051602108237001287e-02,1.026115452759946284e-01,2.084835072139514522e-01,4.345571817427200390e-02,1.104735624770364910e-01,2.145125796975745902e-01,4.171712214225646587e-02,1.062693630666869393e-01,1.001036449754986180e+00,2.006405915604292101e-01,4.983597565236126958e-01,9.919795376713128610e-01,2.013988391460663774e-01,5.168012967222501697e-01,1.012482929893959049e+00,2.008824539928881214e-01,5.082796176465030902e-01,1.007870963882045556e+00,5.007181697205018711e-01,1.248485830507937600e+00,2.515074182470849351e+00,5.011680631805304209e-01,1.250980889464503809e+00,2.506536598485631373e+00,5.014385564185669386e-01,1.253994384358227521e+00,2.504328689229328386e+00,5.009548570113668831e-01],
  [2.016197739567205938e-01,4.153019440966529974e-01,8.288001322482690947e-02,2.021482459967779144e-01,4.097472882709217168e-01,7.841844773217344911e-02,1.949411298479671595e-01,3.959277302458867887e-01,8.156528905223429937e-02,2.041548859481267242e-01,2.001673712942832473e-01,4.192762524627808435e-02,1.015927329106762617e-01,2.123640299736706538e-01,4.111287462102027751e-02,1.015443530946688044e-01,1.976106112567881934e-01,4.228755199288708466e-02,9.993204718198159253e-02,2.145716432851048072e-01,8.008521448222722938e-01,2.006444194918718615e+00,3.988060778065551037e+00,8.003712342856444950e-01,2.009439729066616387e+00,3.977736305556768936e+00,7.952715382697893576e-01,1.998035250441190902e+00,4.002975779303088899e+00,8.005900807581640688e-01],
  [1.068477783409722964e-01,2.024678055059752069e-01,4.409196871812873231e-02,1.017458989988516277e-01,2.025484256293996754e-01,4.089636843440087183e-02,1.052172088305577680e-01,2.135131485575636756e-01,4.243620844388647229e-02,1.089970024413555727e-01,1.014620963973224432e+00,2.053694149598790097e-01,5.093823527058047862e-01,1.017056583819094362e+00,2.030716444593123060e-01,5.126945809933223241e-01,1.002834080980503861e+00,1.994498703600313672e-01,5.018419660548135708e-01,1.003931653873086471e+00,5.013869761609868192e-01,1.259513671036111671e+00,2.510250586688775432e+00,5.035409867528692907e-01,1.259320446451601461e+00,2.517782212555017107e+00,5.030960926209970818e-01,1.246074604702630761e+00,2.498477222503793005e+00,5.032288053003963757e-01],
  [2.024931984909744687e-01,4.129040482553232305e-01,8.024053249307558366e-02,2.052213980243023650e-01,4.158026731657601949e-01,8.192126742896224667e-02,2.038022703873144659e-01,4.173538838262267903e-01,8.306574845987996225e-02,2.048076096563373194e-01,2.193146946086791393e-01,4.282100616963975537e-02,1.017554608619902490e-01,2.070729566485970674e-01,4.394684025124982046e-02,1.078654923307018065e-01,2.079369465076812418e-01,4.099718610797593865e-02,1.076543197380411404e-01,2.140857564082402631e-01,8.004533142488683417e-01,2.012199989474120709e+00,4.040467390876828269e+00,8.036995226404722859e-01,2.008372262543732134e+00,3.994569948552525229e+00,8.054453595726150938e-01,2.021129331924231831e+00,4.040310458024648277e+00,8.038397894186088966e-01],
  [2.006699275350857792e-01,4.127508180991981690e-01,8.378541357421033509e-02,2.028323949311920671e-01,4.009985015472681824e-01,8.249383594694151278e-02,2.012832287636399653e-01,4.103670944963532241e-01,8.155139780101680613e-02,2.056901492480381344e-01,2.138620071924426380e-01,4.251185467161185116e-02,1.057730023828401256e-01,2.142004228932566368e-01,4.364871166227240334e-02,1.032086705382505298e-01,2.123288504568303370e-01,4.330838541839705791e-02,1.015110853928511969e-01,2.068551367983296752e-01,8.027660821003017588e-01,1.999339443656665161e+00,3.998987200733931324e+00,8.056077503689013097e-01,2.034140104407683669e+00,4.067751988493217397e+00,8.117562077659516984e-01,2.011722023587367403e+00,4.006169403619947111e+00,8.021823982942795084e-01],
])
print(data.shape)
print(predict(data))

# 1.000000000000000000e+00
# 0.000000000000000000e+00
# 1.000000000000000000e+00
# 0.000000000000000000e+00
# 1.000000000000000000e+00
# 1.000000000000000000e+00